// This is an example script to generate a .env.local file
// You can run it with: node setup-env-example.js

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envFile = path.join(process.cwd(), '.env.local');

// Check if .env.local already exists
if (fs.existsSync(envFile)) {
  console.log('\x1b[33m%s\x1b[0m', '⚠️ Warning: .env.local file already exists!');
  rl.question('Do you want to overwrite it? (y/n): ', (answer) => {
    if (answer.toLowerCase() !== 'y') {
      console.log('Operation cancelled. Existing .env.local file was not modified.');
      rl.close();
      return;
    }
    collectEnvVars();
  });
} else {
  collectEnvVars();
}

function collectEnvVars() {
  console.log('\x1b[36m%s\x1b[0m', '🔧 Setting up environment variables for Task Manager');
  
  const envVars = {
    DATABASE_URL: '',
    CLERK_SECRET_KEY: '',
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: '',
    GEMINI_API_KEY: '',
  };
  
  const questions = [
    {
      name: 'DATABASE_URL',
      message: 'Enter your PostgreSQL connection string (e.g., postgresql://username:password@localhost:5432/taskmanager):',
      default: 'postgresql://postgres:postgres@localhost:5432/taskmanager'
    },
    {
      name: 'CLERK_SECRET_KEY',
      message: 'Enter your Clerk Secret Key (from https://clerk.dev dashboard):',
      default: ''
    },
    {
      name: 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
      message: 'Enter your Clerk Publishable Key (from https://clerk.dev dashboard):',
      default: ''
    },
    {
      name: 'GEMINI_API_KEY',
      message: 'Enter your Gemini API Key (from https://ai.google.dev/):',
      default: ''
    }
  ];
  
  askQuestion(0);
  
  function askQuestion(index) {
    if (index >= questions.length) {
      writeEnvFile();
      return;
    }
    
    const q = questions[index];
    rl.question(`${q.message} ${q.default ? `(default: ${q.default})` : ''}\n> `, (answer) => {
      envVars[q.name] = answer || q.default;
      askQuestion(index + 1);
    });
  }
  
  function writeEnvFile() {
    let envContent = '# Generated by setup-env-example.js\n\n';
    
    envContent += '# Database configuration\n';
    envContent += `DATABASE_URL="${envVars.DATABASE_URL}"\n\n`;
    
    envContent += '# Clerk authentication\n';
    envContent += `CLERK_SECRET_KEY=${envVars.CLERK_SECRET_KEY}\n`;
    envContent += `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${envVars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}\n\n`;
    
    envContent += '# Gemini API\n';
    envContent += `GEMINI_API_KEY=${envVars.GEMINI_API_KEY}\n\n`;
    
    envContent += '# Optional Clerk configuration\n';
    envContent += 'NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\n';
    envContent += 'NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up\n';
    envContent += 'NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard\n';
    envContent += 'NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard\n';
    
    fs.writeFileSync(envFile, envContent);
    
    console.log('\x1b[32m%s\x1b[0m', '✅ .env.local file created successfully!');
    console.log('\x1b[36m%s\x1b[0m', '🚀 You can now run the application with: npm run dev');
    
    rl.close();
  }
} 